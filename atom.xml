<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>yonfeng&#39;s Blog</title>
  
  <subtitle>Keep moving forward. One step at a time</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yonfeng.net/"/>
  <updated>2017-11-06T12:34:40.865Z</updated>
  <id>http://yonfeng.net/</id>
  
  <author>
    <name>yonfeng</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Coding Guidelines</title>
    <link href="http://yonfeng.net/2017/11/05/Guidelines/"/>
    <id>http://yonfeng.net/2017/11/05/Guidelines/</id>
    <published>2017-11-05T13:30:52.000Z</published>
    <updated>2017-11-06T12:34:40.865Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://cc.cocimg.com/api/uploads//20171026/1509003373729113.gif" alt="" title="读别人写的代码的时候：这是什么…………我X"></p><a id="more"></a><p><img src="http://www.10tiao.com/img.do?url=http%3A//mmbiz.qpic.cn/mmbiz_gif/rh7Nru3hbNOrWQPgZCnOyIwwgQ3LmNluibusvicXViaAkXjck9anMWC6P5IhGGtfFhHfgEB9uLvqQxfAWCVChuUxg/0%3Fwx_fmt%3Dgif" alt="" title="偶然间看到之前写的代码"></p><p>上面应该是开发者经常遇到的内心戏😂</p><h3 id="痛点"><a href="#痛点" class="headerlink" title="痛点"></a>痛点</h3><p>项目创建和团队组建一般会有一些公共的约定以及一些规范定下来，而代码大多数是通过主流的Git来做版本控制的，但是这种规范只能依靠个人的意识，或者通过代码Review来解决，而做代码Review的时候，你也不好意思总是写上一堆诸如“这里要加个空格”、“那里要加上换行”的评论吧？同时随着团队人员的扩增或项目功能迭代代码量越来越大，如果不管，久而久之，会因为每个人的习惯不同，代码呈现出多种风格，导致项目的维护扩展越来越困难，项目代码看起来也不像一个成熟团队做出来的产品，这也导致开发者经常吐槽项目代码烂。   </p><p>commit message编写随意，提交内容和主题差异大（甚至commit massage是空的，或者永远都是固定的类似 test的字符😂），导致回查困难。 </p><p>代码规范想必有部分同学会把它和个人习惯混为一谈，其实代码规范和个人习惯压根不是一个层面上的东西。代码规范针对的是团队，而个人习惯仅仅针对你自己。代码规范的目的是为了提高团队协作的效率以及代码的可读可维护性，这是需要团队共同推进实施的，难的是如何更好的落地实施和持续做下去。</p><h3 id="针对上面痛点要解决的问题"><a href="#针对上面痛点要解决的问题" class="headerlink" title="针对上面痛点要解决的问题"></a>针对上面痛点要解决的问题</h3><ol><li>代码的规范化及规范的定义</li><li>规范的应用与落地实施 （要简单易用，最好能自动化）</li><li>commit message的规范化及自动校验</li></ol><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><ul><li>代码规范     &gt;&gt; 基于clang-format的 <a href="https://github.com/bluesky0109/spacecommander" target="_blank" rel="external">spacecommander</a>  </li><li>commit message     &gt;&gt; <a href="https://github.com/commitizen/cz-cli" target="_blank" rel="external">Commitizen</a> + <a href="https://github.com/marionebl/commitlint" target="_blank" rel="external">commitlint</a> + <a href="https://github.com/typicode/husky" target="_blank" rel="external">husky</a></li></ul><h3 id="代码规范"><a href="#代码规范" class="headerlink" title="代码规范"></a>代码规范</h3><h4 id="关于代码规范的选择原则"><a href="#关于代码规范的选择原则" class="headerlink" title="关于代码规范的选择原则"></a>关于代码规范的选择原则</h4><ol><li>每种语言 都会有一些 行业标准或最佳实践之类的，优先选择 大家都认可的规范标准</li><li>不要带有个人习惯倾向 来设定编码规范，当遇到个人习惯和行业规范相冲突时应该反思下自己的编码习惯是否不太合适，调整自己改掉自己的不良习惯来去适应标准规范，而不是让标准来迁就自己的个人习惯</li></ol><p>这里针对Objctive-C语言 推荐一份个人翻译的基于raywenderlich.com的<a href="/images/iOS-Style-Guide.pdf">iOS-Style-Guide</a>。<br>针对iOS的Objective-C项目选择基于 clang-format的 spacecommand来做代码规范校验及自动化格式代码, 主要优点：   </p><ul><li>使用方法极其简单  </li><li>功能丰富，不仅能结合githooks进行校验，还能按照指定的规范自动格式化代码  </li><li>可默认自定义忽略不需要格式化的文件  </li></ul><h4 id="spacecommand的安装和使用"><a href="#spacecommand的安装和使用" class="headerlink" title="spacecommand的安装和使用"></a>spacecommand的安装和使用</h4><h5 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h5><ol><li>clone spacecommander的代码<br><code>git clone https://github.com/bluesky0109/spacecommander</code><br>到任意一个目录中，记录下这个目录路径 (<strong><code>pwd</code>查看路径</strong>）。  </li><li>为了后期方便使用,我们可以定义环境变量,在 ~/.zshrc中,添加一行<br><code>export SPACECOMMANDER=&quot;spacecommanderPath&quot;</code></li><li>配置别名，方便后面使用。 ~/.zshrc中添加如下代码<br>配置别名：  </li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">alias fmtSetup=&quot;$SPACECOMMANDER/setup-repo.sh&quot;</div><div class="line"></div><div class="line">alias fmtFile=&quot;$SPACECOMMANDER/format-objc-file.sh&quot;</div><div class="line"></div><div class="line">alias fmtRepo=&quot;$SPACECOMMANDER/format-objc-files-in-repo.sh&quot;</div></pre></td></tr></table></figure><h5 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h5><ol><li>打开终端，切换到你的某个项目的根目录.例如,示例工程 /Users/sky/myProject<br><code>cd /Users/sky/myProject</code><br>然后 执行 <code>$SPACECOMMANDER/setup-repo.sh</code><br>如果配置了别名 直接 执行 <code>fmtSetup</code> 进行初始化配置</li></ol><blockquote><p>备注: 如果你的项目包含了sub module,sub module并不会被添加hooks脚本,如果需要添加,需要进入module,再运行脚本命令  </p></blockquote><p>从上面脚本的运行中的回显,可以看到,该命令完成了两件事情:    </p><pre><code>1. 添加了隐藏文件 .clang-format文件的替身（.clang-format定义了各种规范配置）   2. 添加了git hooks ,pre-commit,没有后缀名的那个,凡是带.sample的文件都是示例文件,那是git给你的示例demo,教你写hooks的</code></pre><ol><li>执行 fmtRepo 根据.clang-format定义的各种规范配置对整个 Repo工程代码进行格式化</li><li>执行 fmtFile filePath 根据.clang-format定义的各种规范配置 对指定文件进行格式化</li></ol><h3 id="commit-message的规范和校验"><a href="#commit-message的规范和校验" class="headerlink" title="commit message的规范和校验"></a>commit message的规范和校验</h3><p>代码按照规范编写完成后，就需要提交及推送到远程，这里有个重要的点就是 commit message的编写。</p><h4 id="commit-message的格式规范"><a href="#commit-message的格式规范" class="headerlink" title="commit message的格式规范"></a>commit message的格式规范</h4><p>社区有多种 Commit message 的<a href="https://github.com/ajoslin/conventional-changelog/blob/master/conventions" target="_blank" rel="external">写法规范</a>。<br>这里介绍基于<a href="https://docs.google.com/document/d/1QrDFcIiPjSLDn3EL15IJygNPiHORgU1_OOAqWjiDU5Y/edit#heading=h.greljkmo14y0" target="_blank" rel="external">Angular 规范</a>，这是目前使用最广的写法，比较合理和系统化，并且有配套的工具。</p><p>每次提交，commit message都要包含三个部分：Header,Body和Footer。  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;type&gt;(&lt;scop&gt;): &lt;subject&gt;  </div><div class="line">//  空一行   </div><div class="line">&lt;body&gt;  </div><div class="line">//  空一行  </div><div class="line">&lt;footer&gt;</div></pre></td></tr></table></figure><p>其中，Header是必需的，Body和Footer可以省略。<br>不管是哪一部分，任何一行都不得超过72个字符（或100个字符）。这是为了避免自动换行影响美观。</p><p>type用于说明commit的类别，只允许使用下面的标识。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">feat：新功能  </div><div class="line">fix：修复bug  </div><div class="line">docs：只改变文档  </div><div class="line">styles：只是改变代码风格（不影响代码的原有运行和逻辑）  </div><div class="line">refactor：重构（既不是新增功能，也不是修改bug的变动）  </div><div class="line">perf：提高性能的代码修改  </div><div class="line">test：增加缺失的测试或修正现有的测试  </div><div class="line">build：影响构建系统或外部依赖的改变  </div><div class="line">ci：CI配置和脚本的改动  </div><div class="line">chore：构建过程或辅助工具的变动  </div><div class="line">revert：撤销之前的提交</div></pre></td></tr></table></figure><h4 id="commit-message的格式化工具及自动校验"><a href="#commit-message的格式化工具及自动校验" class="headerlink" title="commit message的格式化工具及自动校验"></a>commit message的格式化工具及自动校验</h4><p><a href="https://github.com/commitizen/cz-cli" target="_blank" rel="external">Commitizen</a>是一个格式化commit message的工具  </p><ol><li>需要 npm环境，npm安装自行根据系统选择安装方式  </li><li>npm install -g commitizen  </li><li>使用Anjular的commit 规范,在项目的根目录下执行命令：<code>commitizen init cz-conventional-changelog</code><br>4.以后所有提交的时候，用git cz 代替 git commit命令，就会出现提及类型的选择  </li></ol><blockquote><p>备注：可能遇到的问题：因为commitizen工具是基于Node.js的，而我们的工程目录下是没有package.json的<br>，执行上面的命令可能就会报错，或者git cz时不能正常弹出 类型选择<br>解决方法： 在项目中 执行 npm init —yes来添加一个package.json然后再执行上面的命令。  </p></blockquote><p>5.commit message校验。上面的配置只有在 使用git cz才能保证commit message的规范，<br>接下来安装 <a href="https://github.com/marionebl/commitlint" target="_blank" rel="external">commitlint</a>，并通过<a href="https://github.com/typicode/husky" target="_blank" rel="external">husky</a>配置githooks每次提交执行脚本 自动校验 commit message是否符合规范：</p><blockquote><p>Install commitlint cli and angular config<br><code>npm install --save-dev @commitlint/{config-angular,cli}</code><br>Configure commitlint to use angular config<br><code>echo &quot;module.exports = {extends: [&#39;@commitlint/config-angular&#39;]}&quot; &gt; commitlint.config.js</code></p></blockquote><p>然后在 package.json中配置如下脚本  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&quot;scripts&quot;: &#123;  </div><div class="line">    &quot;commitmsg&quot;: &quot;commitlint -e $GIT_PARAMS&quot;  </div><div class="line">&#125;</div></pre></td></tr></table></figure><p>以后每次提交  git commit 时就会后自动跑脚本校验 编写的 commit message是否符合规范，如果不符合会失败。</p><p>前面代码规范 和 commit message 逐步做的都比较好后 慢慢就会有这种感觉<br><img src="http://www.10tiao.com/img.do?url=http%3A//mmbiz.qpic.cn/mmbiz_gif/1hReHaqafad7tbP4xPynYftcqyibzkXvS3F3aM9La7OEpr9Z4QLz51ib0WAOtTF8Lb0ShZQ3VJy1E92OibDxIpJ1Q/0%3Fwx_fmt%3Dgif" alt="" title="一切尽在掌控中"></p><h3 id="接下来何去何从"><a href="#接下来何去何从" class="headerlink" title="接下来何去何从"></a>接下来何去何从</h3><p>just do it, 实操才能真正掌握, 工具和操作方法都给了，至于用不用、怎么用还取决于你。</p><h3 id="小彩蛋"><a href="#小彩蛋" class="headerlink" title="小彩蛋"></a>小彩蛋</h3><p>下篇预告：<br>给你一个高性能、高可定制化的 扫码组件（极速启动、什么二维码、条形码、各种常规码都不在话下，什么微信扫码界面、支付宝扫码界面、自动感应环境亮度均可定制，还可以按照自己的需求DIY，你的扫码组件你做主）  </p><p>提前体验 请查看<a href="https://github.com/bluesky0109/YFCodeScan" target="_blank" rel="external">YFCodeScan</a>（<mark>功能均已完成，文档和示例demo待补充</mark>），敬请关注本博客.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://cc.cocimg.com/api/uploads//20171026/1509003373729113.gif&quot; alt=&quot;&quot; title=&quot;读别人写的代码的时候：这是什么…………我X&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Programming" scheme="http://yonfeng.net/tags/Programming/"/>
    
  </entry>
  
  <entry>
    <title>take a new lease of life</title>
    <link href="http://yonfeng.net/2017/10/29/Rebirth/"/>
    <id>http://yonfeng.net/2017/10/29/Rebirth/</id>
    <published>2017-10-29T03:30:00.000Z</published>
    <updated>2017-11-05T02:22:58.111Z</updated>
    
    <content type="html"><![CDATA[<h3 id="programming-makes-me-happy-rediscover-myself-and-gives-me-a-new-lease-of-life-Every-day-for-tomorrow-keep-move-on💪"><a href="#programming-makes-me-happy-rediscover-myself-and-gives-me-a-new-lease-of-life-Every-day-for-tomorrow-keep-move-on💪" class="headerlink" title="programming makes me happy, rediscover myself, and gives me a new lease of life. Every day for tomorrow, keep move on💪"></a>programming makes me happy, rediscover myself, and gives me a new lease of life. Every day for tomorrow, keep move on💪</h3><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;programming-makes-me-happy-rediscover-myself-and-gives-me-a-new-lease-of-life-Every-day-for-tomorrow-keep-move-on💪&quot;&gt;&lt;a href=&quot;#programming-makes-me-happy-rediscover-myself-and-gives-me-a-new-lease-of-life-Every-day-for-tomorrow-keep-move-on💪&quot; class=&quot;headerlink&quot; title=&quot;programming makes me happy, rediscover myself, and gives me a new lease of life. Every day for tomorrow, keep move on💪&quot;&gt;&lt;/a&gt;programming makes me happy, rediscover myself, and gives me a new lease of life. Every day for tomorrow, keep move on💪&lt;/h3&gt;
    
    </summary>
    
    
      <category term="Life" scheme="http://yonfeng.net/tags/Life/"/>
    
  </entry>
  
</feed>
